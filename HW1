using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.IO;


namespace DSHW1CWANG
{
	class MainClass
	{


		//computation;
		private static void compute(int n, int k)
		{
			long sum;
			sum = 0;
			for (long i = 1; i <= k; i++) 
			{
				sum = sum + i;
			}
			Console.WriteLine ("The sum from "+ n + " to " + k+ " is: " + sum);

		}

		//check and run task
		private static void check(string s)
		{
			//list out tasks

			Task T1 = new Task (() => compute(1,10));//sleep for 2 sec
			Task T2 = new Task (() => compute (1, 38)); //sleep for 5 sec
			Task T3 = new Task (() => compute (1, 50)); //sum 1 to 50
			Task T4 = new Task (() => compute (1, 10000000)); //sleep for 4 sec
			Task T5 = new Task (() => compute (1, 10000)); //sum 1 to 10,000

			if (s == "T1") {
				if (T1.Status != TaskStatus.RanToCompletion) {
					T1.Start ();
					T1.Wait ();
				}
			} else if (s == "T2") {
				if (T2.Status != TaskStatus.RanToCompletion) {
					T2.Start ();
					T2.Wait ();
				} 
			}
			else if (s == "T3") {
				if (T3.Status != TaskStatus.RanToCompletion) {
					T3.Start ();
					T3.Wait ();
				}
			}
			else if (s == "T4") {
				if (T4.Status != TaskStatus.RanToCompletion) {
					T4.Start ();
					T4.Wait ();
				}
			}
			else if (s == "T5") {
				if (T5.Status != TaskStatus.RanToCompletion) {
					T5.Start ();
					T5.Wait ();
				}
			}
		}

		public static void Main (string[] args)
		{
			//load txt to a list
			List<string> order = new List <string>();
			StreamReader file = new StreamReader("1.txt");
			string input = file.ReadLine ();

			while (input != null) {
				string[] value = input.Split (' ');
				for (int i = 0; i < value.Length; i++) {
					order.Add (value [i]);
					input = file.ReadLine ();
				}
			}
			file.Close ();

			//output txt file

			foreach (string s in order) {
				Console.Write(s);
			}
			Console.WriteLine ();

		
			//build structure
			for (int i = 0; i < order.Count; i++) 
			{
				if (i - 1 < 0) {
					Console.WriteLine (order [i] + ": ");
					check (order [i]);
				} else if (order [i - 1] == "->") {
					if (i - 3 < 0) {
						Console.WriteLine (order [i] + ": " + order [i - 2]);
						check (order [i - 2]);
					} else if (i - 3 > 0 && order [i - 3] != "||") {
						Console.WriteLine (order [i] + ": " + order [i - 2]);
						check (order [i - 2]);
					} else {
						Console.WriteLine (order [i] + ": " + order [i - 4] + ", " + order [i - 2]);
						check (order [i - 4]);
						check (order [i - 2]);
					}

				} else if (order [i - 1] == "||" && i - 4 >= 0) {
					Console.WriteLine (order [i] + ": " + order [i - 4]);
					check (order [i - 4]);
				} else if (order [i - 1] == "||" && i - 4 < 0) {
					Console.WriteLine (order [i] + ": ");
				} 
			}
			check (order [order.Count - 1]);

		}
	}
}
